# -*- coding: utf-8 -*-
"""review_retrieval_tool.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pFelpztKoba91Y3wXgIxd3YayJhPpyGA
"""

!pip install google-generativeai
import google.generativeai as genai
import os
import re
import pandas as pd
import numpy as np
!pip install transformers

os.environ['GEMINI_API_KEY'] = 'AIzaSyDEqNdX01Wx_qxiTlX4gDQquWImq6zZq6Q'

def generate_course_summary(excel_path):
    """
    Generates a summary for a course based on Excel data using Gemini AI.

    Args:
        excel_path (str): Path to the Excel file containing course data

    Returns:
        str: Generated summary if successful, error message if unsuccessful
    """
    def normalize_course_code(course_code):
        """
        Normalizes course code by converting to uppercase, removing spaces and special characters.
        """
        return re.sub(r'[^a-zA-Z0-9]', '', course_code.upper())

    try:
        # Check for API key in environment variables
        api_key = os.getenv('GEMINI_API_KEY')
        if not api_key:
            return "Error: GEMINI_API_KEY environment variable not set"

        # Configure Gemini API
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-pro')

        # Load and process Excel file
        df = pd.read_excel('/content/HEL Review (AY 2023-24 - Sem 2) (Responses) (1) (1).xlsx')

        # Get course ID input
        course_id = input("Enter the course ID to filter: ")
        normalized_course_id = normalize_course_code(course_id)

        # Normalize course names in dataframe
        df['Normalized_Course_Name'] = df['Course Name'].fillna('').apply(normalize_course_code)

        # Filter rows
        filtered_rows = df[df['Normalized_Course_Name'].str.startswith(normalized_course_id, na=False)]

        if filtered_rows.empty:
            return f"No such course with ID '{course_id}' available in the database."

        # Create paragraph from filtered data
        paragraph = ""
        for _, row in filtered_rows.iterrows():
            row_string = " | ".join(
                f"{col}: {row[col]}"
                for col in df.columns
                if col != 'Normalized_Course_Name'
            )
            paragraph += row_string + "\n"

        # Generate prompt for Gemini
        prompt = f"""
        The following is data about a course:

        {paragraph}

        Task: Please provide a concise summary of this course information in a single flowing paragraph without bullet points or sections. Include key details about the course name, content, instructor, evaluation methods, and student feedback.
        """

        # Generate and return summary
        response = model.generate_content(prompt)
        return response.text

    except Exception as e:
        return f"An error occurred: {str(e)}"

# Example usage:
if __name__ == "__main__":

    summary = generate_course_summary('/content/HEL Review (AY 2023-24 - Sem 2) (Responses) (1) (1).xlsx')
    print("\nSummary:")
    print(summary)

